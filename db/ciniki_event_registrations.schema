#
# Description
# -----------
# This table stores the registrations of customer for an event.  The customer
# record must be created and then setup as an event registration.
#
# This table can be used to allow one customer to purchase multiple tickets.  If
# there is no additional information required for the registration, there can
# be one entry with num_tickets > 0.  If there is required information about each
# person attending the event, then there should be a customer account created for
# each registration, and multiple entries in the registration_answers table for
# each of the customer attending.  This setup allows for simple to complex registration
# scenarios.
#
# There is no status field, as customers are either registered or no.  There is a status
# on the invoice for if they've paid or not.
#
# Fields
# ------
# id:               The ID assigned to the event.
# uuid:             The Universal Unique ID.
# tnid:             The tenant the event is attached to.
# event_id:         The ID of the event the registration is for.
# customer_id:      The ID of the customer who registered for the event.
# num_tickets:      The number of tickets purchased for the event by the customer.
# invoice_id:       The ID of the invoice in the POS module.  If the ID is zero then
#                   no invoice is attached to this registration.  The customer probably
#                   is a freebe and didn't need to pay.
#
# status:           The current status of the registration.
#
#                   10 - Reserved
#                   20 - Confirmed
#                   30 - Paid
#
# customer_notes:   The notes left by the customer when they signed up online.
# notes:            The notes for the tenant to use, customers won't see it.
#
# date_added:       The UTC date and time the record was added.
# last_updated:     The UTC date and time the record was last updated.
#
create table ciniki_event_registrations (
    id int not null auto_increment,
    uuid char(36) not null,
    tnid int not null,
    event_id int not null,
    customer_id int not null,
    invoice_id int not null,
    status tinyint unsigned not null,
    num_tickets int not null,
    customer_notes varchar(6000) not null,
    notes varchar(6000) not null,
    date_added datetime not null,
    last_updated datetime not null,
    primary key (id),
    index (event_id, customer_id),
    index tenant_uuid (tnid, uuid, last_updated)
) ENGINE='InnoDB', COMMENT='v1.02';
